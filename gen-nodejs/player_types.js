//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.Direction = {
  'UP' : 1,
  'DOWN' : 2,
  'LEFT' : 3,
  'RIGHT' : 4
};
Position = module.exports.Position = function(args) {
  this.x = null;
  this.y = null;
  if (args) {
    if (args.x !== undefined && args.x !== null) {
      this.x = args.x;
    }
    if (args.y !== undefined && args.y !== null) {
      this.y = args.y;
    }
  }
};
Position.prototype = {};
Position.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.x = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.y = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Position.prototype.write = function(output) {
  output.writeStructBegin('Position');
  if (this.x !== null && this.x !== undefined) {
    output.writeFieldBegin('x', Thrift.Type.I32, 1);
    output.writeI32(this.x);
    output.writeFieldEnd();
  }
  if (this.y !== null && this.y !== undefined) {
    output.writeFieldBegin('y', Thrift.Type.I32, 2);
    output.writeI32(this.y);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Tank = module.exports.Tank = function(args) {
  this.id = null;
  this.pos = null;
  this.dir = null;
  this.hp = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.pos !== undefined && args.pos !== null) {
      this.pos = new ttypes.Position(args.pos);
    }
    if (args.dir !== undefined && args.dir !== null) {
      this.dir = args.dir;
    }
    if (args.hp !== undefined && args.hp !== null) {
      this.hp = args.hp;
    }
  }
};
Tank.prototype = {};
Tank.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pos = new ttypes.Position();
        this.pos.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.dir = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.hp = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tank.prototype.write = function(output) {
  output.writeStructBegin('Tank');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.pos !== null && this.pos !== undefined) {
    output.writeFieldBegin('pos', Thrift.Type.STRUCT, 2);
    this.pos.write(output);
    output.writeFieldEnd();
  }
  if (this.dir !== null && this.dir !== undefined) {
    output.writeFieldBegin('dir', Thrift.Type.I32, 3);
    output.writeI32(this.dir);
    output.writeFieldEnd();
  }
  if (this.hp !== null && this.hp !== undefined) {
    output.writeFieldBegin('hp', Thrift.Type.I32, 4);
    output.writeI32(this.hp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Shell = module.exports.Shell = function(args) {
  this.id = null;
  this.pos = null;
  this.dir = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.pos !== undefined && args.pos !== null) {
      this.pos = new ttypes.Position(args.pos);
    }
    if (args.dir !== undefined && args.dir !== null) {
      this.dir = args.dir;
    }
  }
};
Shell.prototype = {};
Shell.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pos = new ttypes.Position();
        this.pos.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.dir = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Shell.prototype.write = function(output) {
  output.writeStructBegin('Shell');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.pos !== null && this.pos !== undefined) {
    output.writeFieldBegin('pos', Thrift.Type.STRUCT, 2);
    this.pos.write(output);
    output.writeFieldEnd();
  }
  if (this.dir !== null && this.dir !== undefined) {
    output.writeFieldBegin('dir', Thrift.Type.I32, 3);
    output.writeI32(this.dir);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GameState = module.exports.GameState = function(args) {
  this.tanks = null;
  this.shells = null;
  this.yourFlagNo = null;
  this.enemyFlagNo = null;
  this.flagPos = null;
  if (args) {
    if (args.tanks !== undefined && args.tanks !== null) {
      this.tanks = Thrift.copyList(args.tanks, [ttypes.Tank]);
    }
    if (args.shells !== undefined && args.shells !== null) {
      this.shells = Thrift.copyList(args.shells, [ttypes.Shell]);
    }
    if (args.yourFlagNo !== undefined && args.yourFlagNo !== null) {
      this.yourFlagNo = args.yourFlagNo;
    }
    if (args.enemyFlagNo !== undefined && args.enemyFlagNo !== null) {
      this.enemyFlagNo = args.enemyFlagNo;
    }
    if (args.flagPos !== undefined && args.flagPos !== null) {
      this.flagPos = new ttypes.Position(args.flagPos);
    }
  }
};
GameState.prototype = {};
GameState.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.tanks = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.Tank();
          elem6.read(input);
          this.tanks.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.shells = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = new ttypes.Shell();
          elem13.read(input);
          this.shells.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.yourFlagNo = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.enemyFlagNo = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.flagPos = new ttypes.Position();
        this.flagPos.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GameState.prototype.write = function(output) {
  output.writeStructBegin('GameState');
  if (this.tanks !== null && this.tanks !== undefined) {
    output.writeFieldBegin('tanks', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.tanks.length);
    for (var iter14 in this.tanks)
    {
      if (this.tanks.hasOwnProperty(iter14))
      {
        iter14 = this.tanks[iter14];
        iter14.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.shells !== null && this.shells !== undefined) {
    output.writeFieldBegin('shells', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.shells.length);
    for (var iter15 in this.shells)
    {
      if (this.shells.hasOwnProperty(iter15))
      {
        iter15 = this.shells[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.yourFlagNo !== null && this.yourFlagNo !== undefined) {
    output.writeFieldBegin('yourFlagNo', Thrift.Type.I32, 3);
    output.writeI32(this.yourFlagNo);
    output.writeFieldEnd();
  }
  if (this.enemyFlagNo !== null && this.enemyFlagNo !== undefined) {
    output.writeFieldBegin('enemyFlagNo', Thrift.Type.I32, 4);
    output.writeI32(this.enemyFlagNo);
    output.writeFieldEnd();
  }
  if (this.flagPos !== null && this.flagPos !== undefined) {
    output.writeFieldBegin('flagPos', Thrift.Type.STRUCT, 5);
    this.flagPos.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Order = module.exports.Order = function(args) {
  this.tankId = null;
  this.order = null;
  this.dir = null;
  if (args) {
    if (args.tankId !== undefined && args.tankId !== null) {
      this.tankId = args.tankId;
    }
    if (args.order !== undefined && args.order !== null) {
      this.order = args.order;
    }
    if (args.dir !== undefined && args.dir !== null) {
      this.dir = args.dir;
    }
  }
};
Order.prototype = {};
Order.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.tankId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.order = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.dir = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Order.prototype.write = function(output) {
  output.writeStructBegin('Order');
  if (this.tankId !== null && this.tankId !== undefined) {
    output.writeFieldBegin('tankId', Thrift.Type.I32, 1);
    output.writeI32(this.tankId);
    output.writeFieldEnd();
  }
  if (this.order !== null && this.order !== undefined) {
    output.writeFieldBegin('order', Thrift.Type.STRING, 2);
    output.writeString(this.order);
    output.writeFieldEnd();
  }
  if (this.dir !== null && this.dir !== undefined) {
    output.writeFieldBegin('dir', Thrift.Type.I32, 3);
    output.writeI32(this.dir);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Args = module.exports.Args = function(args) {
  this.tankSpeed = null;
  this.shellSpeed = null;
  this.tankHP = null;
  this.tankScore = null;
  this.flagScore = null;
  this.maxRound = null;
  this.roundTimeoutInMs = null;
  if (args) {
    if (args.tankSpeed !== undefined && args.tankSpeed !== null) {
      this.tankSpeed = args.tankSpeed;
    }
    if (args.shellSpeed !== undefined && args.shellSpeed !== null) {
      this.shellSpeed = args.shellSpeed;
    }
    if (args.tankHP !== undefined && args.tankHP !== null) {
      this.tankHP = args.tankHP;
    }
    if (args.tankScore !== undefined && args.tankScore !== null) {
      this.tankScore = args.tankScore;
    }
    if (args.flagScore !== undefined && args.flagScore !== null) {
      this.flagScore = args.flagScore;
    }
    if (args.maxRound !== undefined && args.maxRound !== null) {
      this.maxRound = args.maxRound;
    }
    if (args.roundTimeoutInMs !== undefined && args.roundTimeoutInMs !== null) {
      this.roundTimeoutInMs = args.roundTimeoutInMs;
    }
  }
};
Args.prototype = {};
Args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.tankSpeed = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.shellSpeed = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.tankHP = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.tankScore = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.flagScore = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.maxRound = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.roundTimeoutInMs = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Args.prototype.write = function(output) {
  output.writeStructBegin('Args');
  if (this.tankSpeed !== null && this.tankSpeed !== undefined) {
    output.writeFieldBegin('tankSpeed', Thrift.Type.I32, 1);
    output.writeI32(this.tankSpeed);
    output.writeFieldEnd();
  }
  if (this.shellSpeed !== null && this.shellSpeed !== undefined) {
    output.writeFieldBegin('shellSpeed', Thrift.Type.I32, 2);
    output.writeI32(this.shellSpeed);
    output.writeFieldEnd();
  }
  if (this.tankHP !== null && this.tankHP !== undefined) {
    output.writeFieldBegin('tankHP', Thrift.Type.I32, 3);
    output.writeI32(this.tankHP);
    output.writeFieldEnd();
  }
  if (this.tankScore !== null && this.tankScore !== undefined) {
    output.writeFieldBegin('tankScore', Thrift.Type.I32, 4);
    output.writeI32(this.tankScore);
    output.writeFieldEnd();
  }
  if (this.flagScore !== null && this.flagScore !== undefined) {
    output.writeFieldBegin('flagScore', Thrift.Type.I32, 5);
    output.writeI32(this.flagScore);
    output.writeFieldEnd();
  }
  if (this.maxRound !== null && this.maxRound !== undefined) {
    output.writeFieldBegin('maxRound', Thrift.Type.I32, 6);
    output.writeI32(this.maxRound);
    output.writeFieldEnd();
  }
  if (this.roundTimeoutInMs !== null && this.roundTimeoutInMs !== undefined) {
    output.writeFieldBegin('roundTimeoutInMs', Thrift.Type.I32, 7);
    output.writeI32(this.roundTimeoutInMs);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

