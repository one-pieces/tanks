//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./player_types');
//HELPER FUNCTIONS AND STRUCTURES

PlayerServer_uploadMap_args = function(args) {
  this.gamemap = null;
  if (args) {
    if (args.gamemap !== undefined && args.gamemap !== null) {
      this.gamemap = Thrift.copyList(args.gamemap, [Thrift.copyList, null]);
    }
  }
};
PlayerServer_uploadMap_args.prototype = {};
PlayerServer_uploadMap_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.gamemap = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          var _size23 = 0;
          var _rtmp327;
          elem22 = [];
          var _etype26 = 0;
          _rtmp327 = input.readListBegin();
          _etype26 = _rtmp327.etype;
          _size23 = _rtmp327.size;
          for (var _i28 = 0; _i28 < _size23; ++_i28)
          {
            var elem29 = null;
            elem29 = input.readI32();
            elem22.push(elem29);
          }
          input.readListEnd();
          this.gamemap.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PlayerServer_uploadMap_args.prototype.write = function(output) {
  output.writeStructBegin('PlayerServer_uploadMap_args');
  if (this.gamemap !== null && this.gamemap !== undefined) {
    output.writeFieldBegin('gamemap', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.LIST, this.gamemap.length);
    for (var iter30 in this.gamemap)
    {
      if (this.gamemap.hasOwnProperty(iter30))
      {
        iter30 = this.gamemap[iter30];
        output.writeListBegin(Thrift.Type.I32, iter30.length);
        for (var iter31 in iter30)
        {
          if (iter30.hasOwnProperty(iter31))
          {
            iter31 = iter30[iter31];
            output.writeI32(iter31);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PlayerServer_uploadMap_result = function(args) {
};
PlayerServer_uploadMap_result.prototype = {};
PlayerServer_uploadMap_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PlayerServer_uploadMap_result.prototype.write = function(output) {
  output.writeStructBegin('PlayerServer_uploadMap_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PlayerServer_uploadParamters_args = function(args) {
  this.arguments = null;
  if (args) {
    if (args.arguments !== undefined && args.arguments !== null) {
      this.arguments = new ttypes.Args(args.arguments);
    }
  }
};
PlayerServer_uploadParamters_args.prototype = {};
PlayerServer_uploadParamters_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.arguments = new ttypes.Args();
        this.arguments.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PlayerServer_uploadParamters_args.prototype.write = function(output) {
  output.writeStructBegin('PlayerServer_uploadParamters_args');
  if (this.arguments !== null && this.arguments !== undefined) {
    output.writeFieldBegin('arguments', Thrift.Type.STRUCT, 1);
    this.arguments.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PlayerServer_uploadParamters_result = function(args) {
};
PlayerServer_uploadParamters_result.prototype = {};
PlayerServer_uploadParamters_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PlayerServer_uploadParamters_result.prototype.write = function(output) {
  output.writeStructBegin('PlayerServer_uploadParamters_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PlayerServer_assignTanks_args = function(args) {
  this.tanks = null;
  if (args) {
    if (args.tanks !== undefined && args.tanks !== null) {
      this.tanks = Thrift.copyList(args.tanks, [null]);
    }
  }
};
PlayerServer_assignTanks_args.prototype = {};
PlayerServer_assignTanks_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.tanks = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = input.readI32();
          this.tanks.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PlayerServer_assignTanks_args.prototype.write = function(output) {
  output.writeStructBegin('PlayerServer_assignTanks_args');
  if (this.tanks !== null && this.tanks !== undefined) {
    output.writeFieldBegin('tanks', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.tanks.length);
    for (var iter39 in this.tanks)
    {
      if (this.tanks.hasOwnProperty(iter39))
      {
        iter39 = this.tanks[iter39];
        output.writeI32(iter39);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PlayerServer_assignTanks_result = function(args) {
};
PlayerServer_assignTanks_result.prototype = {};
PlayerServer_assignTanks_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PlayerServer_assignTanks_result.prototype.write = function(output) {
  output.writeStructBegin('PlayerServer_assignTanks_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PlayerServer_latestState_args = function(args) {
  this.state = null;
  if (args) {
    if (args.state !== undefined && args.state !== null) {
      this.state = new ttypes.GameState(args.state);
    }
  }
};
PlayerServer_latestState_args.prototype = {};
PlayerServer_latestState_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.state = new ttypes.GameState();
        this.state.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PlayerServer_latestState_args.prototype.write = function(output) {
  output.writeStructBegin('PlayerServer_latestState_args');
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.STRUCT, 1);
    this.state.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PlayerServer_latestState_result = function(args) {
};
PlayerServer_latestState_result.prototype = {};
PlayerServer_latestState_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PlayerServer_latestState_result.prototype.write = function(output) {
  output.writeStructBegin('PlayerServer_latestState_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PlayerServer_getNewOrders_args = function(args) {
};
PlayerServer_getNewOrders_args.prototype = {};
PlayerServer_getNewOrders_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PlayerServer_getNewOrders_args.prototype.write = function(output) {
  output.writeStructBegin('PlayerServer_getNewOrders_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PlayerServer_getNewOrders_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Order]);
    }
  }
};
PlayerServer_getNewOrders_result.prototype = {};
PlayerServer_getNewOrders_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.success = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new ttypes.Order();
          elem46.read(input);
          this.success.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PlayerServer_getNewOrders_result.prototype.write = function(output) {
  output.writeStructBegin('PlayerServer_getNewOrders_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter47 in this.success)
    {
      if (this.success.hasOwnProperty(iter47))
      {
        iter47 = this.success[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PlayerServerClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
PlayerServerClient.prototype = {};
PlayerServerClient.prototype.seqid = function() { return this._seqid; }
PlayerServerClient.prototype.new_seqid = function() { return this._seqid += 1; }
PlayerServerClient.prototype.uploadMap = function(gamemap, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_uploadMap(gamemap);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_uploadMap(gamemap);
  }
};

PlayerServerClient.prototype.send_uploadMap = function(gamemap) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('uploadMap', Thrift.MessageType.CALL, this.seqid());
  var args = new PlayerServer_uploadMap_args();
  args.gamemap = gamemap;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PlayerServerClient.prototype.recv_uploadMap = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PlayerServer_uploadMap_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
PlayerServerClient.prototype.uploadParamters = function(arguments, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_uploadParamters(arguments);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_uploadParamters(arguments);
  }
};

PlayerServerClient.prototype.send_uploadParamters = function(arguments) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('uploadParamters', Thrift.MessageType.CALL, this.seqid());
  var args = new PlayerServer_uploadParamters_args();
  args.arguments = arguments;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PlayerServerClient.prototype.recv_uploadParamters = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PlayerServer_uploadParamters_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
PlayerServerClient.prototype.assignTanks = function(tanks, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_assignTanks(tanks);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_assignTanks(tanks);
  }
};

PlayerServerClient.prototype.send_assignTanks = function(tanks) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('assignTanks', Thrift.MessageType.CALL, this.seqid());
  var args = new PlayerServer_assignTanks_args();
  args.tanks = tanks;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PlayerServerClient.prototype.recv_assignTanks = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PlayerServer_assignTanks_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
PlayerServerClient.prototype.latestState = function(state, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_latestState(state);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_latestState(state);
  }
};

PlayerServerClient.prototype.send_latestState = function(state) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('latestState', Thrift.MessageType.CALL, this.seqid());
  var args = new PlayerServer_latestState_args();
  args.state = state;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PlayerServerClient.prototype.recv_latestState = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PlayerServer_latestState_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
PlayerServerClient.prototype.getNewOrders = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getNewOrders();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getNewOrders();
  }
};

PlayerServerClient.prototype.send_getNewOrders = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getNewOrders', Thrift.MessageType.CALL, this.seqid());
  var args = new PlayerServer_getNewOrders_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PlayerServerClient.prototype.recv_getNewOrders = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PlayerServer_getNewOrders_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getNewOrders failed: unknown result');
};
PlayerServerProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
PlayerServerProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

PlayerServerProcessor.prototype.process_uploadMap = function(seqid, input, output) {
  var args = new PlayerServer_uploadMap_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.uploadMap.length === 1) {
    Q.fcall(this._handler.uploadMap, args.gamemap)
      .then(function(result) {
        var result = new PlayerServer_uploadMap_result({success: result});
        output.writeMessageBegin("uploadMap", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("uploadMap", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.uploadMap(args.gamemap, function (err, result) {
      if (err == null) {
        var result = new PlayerServer_uploadMap_result((err != null ? err : {success: result}));
        output.writeMessageBegin("uploadMap", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("uploadMap", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PlayerServerProcessor.prototype.process_uploadParamters = function(seqid, input, output) {
  var args = new PlayerServer_uploadParamters_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.uploadParamters.length === 1) {
    Q.fcall(this._handler.uploadParamters, args.arguments)
      .then(function(result) {
        var result = new PlayerServer_uploadParamters_result({success: result});
        output.writeMessageBegin("uploadParamters", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("uploadParamters", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.uploadParamters(args.arguments, function (err, result) {
      if (err == null) {
        var result = new PlayerServer_uploadParamters_result((err != null ? err : {success: result}));
        output.writeMessageBegin("uploadParamters", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("uploadParamters", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PlayerServerProcessor.prototype.process_assignTanks = function(seqid, input, output) {
  var args = new PlayerServer_assignTanks_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.assignTanks.length === 1) {
    Q.fcall(this._handler.assignTanks, args.tanks)
      .then(function(result) {
        var result = new PlayerServer_assignTanks_result({success: result});
        output.writeMessageBegin("assignTanks", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("assignTanks", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.assignTanks(args.tanks, function (err, result) {
      if (err == null) {
        var result = new PlayerServer_assignTanks_result((err != null ? err : {success: result}));
        output.writeMessageBegin("assignTanks", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("assignTanks", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PlayerServerProcessor.prototype.process_latestState = function(seqid, input, output) {
  var args = new PlayerServer_latestState_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.latestState.length === 1) {
    Q.fcall(this._handler.latestState, args.state)
      .then(function(result) {
        var result = new PlayerServer_latestState_result({success: result});
        output.writeMessageBegin("latestState", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("latestState", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.latestState(args.state, function (err, result) {
      if (err == null) {
        var result = new PlayerServer_latestState_result((err != null ? err : {success: result}));
        output.writeMessageBegin("latestState", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("latestState", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PlayerServerProcessor.prototype.process_getNewOrders = function(seqid, input, output) {
  var args = new PlayerServer_getNewOrders_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getNewOrders.length === 0) {
    Q.fcall(this._handler.getNewOrders)
      .then(function(result) {
        var result = new PlayerServer_getNewOrders_result({success: result});
        output.writeMessageBegin("getNewOrders", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNewOrders", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getNewOrders(function (err, result) {
      if (err == null) {
        var result = new PlayerServer_getNewOrders_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getNewOrders", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNewOrders", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

